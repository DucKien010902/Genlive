const Creator = require('../model/Talents');
class CreatorController {
  // üßæ L·∫•y danh s√°ch t·∫•t c·∫£ creators
  async getAll(req, res) {
    try {
      console.log('here');
      const creators = await Creator.find();
      res.status(200).json(creators);
    } catch (error) {
      res.status(500).json({ message: 'L·ªói khi l·∫•y d·ªØ li·ªáu', error });
    }
  }

  // üîç L·∫•y theo ID
  async getById(req, res) {
    try {
      const creator = await Creator.findById(req.params.id);
      if (!creator)
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y creator' });
      res.status(200).json(creator);
    } catch (error) {
      res.status(500).json({ message: 'L·ªói khi l·∫•y chi ti·∫øt', error });
    }
  }

  // ‚ûï Th√™m m·ªõi
  async create(req, res) {
    try {
      const newCreator = new Creator(req.body);
      await newCreator.save();
      res.status(201).json(newCreator);
    } catch (error) {
      res.status(400).json({ message: 'L·ªói khi th√™m creator', error });
    }
  }

  // üß© C·∫≠p nh·∫≠t
  async update(req, res) {
    try {
      const updated = await Creator.findByIdAndUpdate(req.params.id, req.body, {
        new: true,
      });
      if (!updated)
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y creator' });
      res.status(200).json(updated);
    } catch (error) {
      res.status(400).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t', error });
    }
  }

  // ‚ùå X√≥a
  async delete(req, res) {
    try {
      const deleted = await Creator.findByIdAndDelete(req.params.id);
      if (!deleted)
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y creator' });
      res.status(200).json({ message: 'X√≥a th√†nh c√¥ng' });
    } catch (error) {
      res.status(400).json({ message: 'L·ªói khi x√≥a', error });
    }
  }
}

module.exports = new CreatorController();
